# This GitHub Actions workflow automates the CI build process for the 'tasklist' service.
# It triggers on a `workflow_call` event and accepts inputs for branch name[required], Java version[optional]
#
# It consists of a several steps:
# 1. Setup: It checks out the specified branch, sets up Java and Maven with the provided inputs, and imports secrets from Vault.
# 2. Build: Then it builds the Maven artifacts and Docker images
# 3. Upload: Deploys SNAPSHOT Docker image and mvn artifacts
#
# Environment variables are used to define the image tags used for Docker builds.
# This workflow is designed to provide a comprehensive, automated CI process that ensures code quality, handles secrets securely,
# and enables detailed reporting of test results.

name: Tasklist CI Reusable

on:
  workflow_call:
    inputs:
      branch:
        description: "The branch name to be used for the workflow"
        required: true
        type: string
      pushDocker:
        description: "whether the built docker images are pushed to camunda registry"
        type: boolean
        default: true
      previewEnv:
        description: "Defines whether this is a preview environment build or not. If true, the image will be pushed to the Harbor Docker registry."
        type: boolean
        default: false

defaults:
  run:
    # use bash shell by default to ensure pipefail behavior is the default
    # see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#exit-codes-and-error-action-preference
    shell: bash

# Define environment variables
env:
  BRANCH_NAME: ${{ inputs.branch }}
  IS_DEFAULT_BRANCH: ${{ inputs.branch == 'main' }}
  DOCKER_PLATFORMS: "linux/amd64,linux/arm64"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      # Setup: checkout branch
      - name: Checkout '${{ inputs.branch }}' branch
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871
        with:
          ref: refs/heads/${{ inputs.branch }}
          fetch-depth: 0 # fetches all history for all branches and tags

      #########################################################################
      # Setup: define env variables
      - name: Set GitHub environment variables
        run: |
          GIT_COMMIT_HASH=$(git rev-parse ${{ inputs.branch }})
          BRANCH_SLUG=$(echo "${{ inputs.branch }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')
          echo "IMAGE_TAG=$(if [ "${{ inputs.branch }}" = "main" ]; then echo $GIT_COMMIT_HASH; else echo "branch-$BRANCH_SLUG"; fi)" >> $GITHUB_ENV
          echo "CI_IMAGE_TAG=ci-$GIT_COMMIT_HASH" >> $GITHUB_ENV
          echo "PR_IMAGE_TAG=pr-$GIT_COMMIT_HASH" >> $GITHUB_ENV

      #########################################################################
      # Setup: import secrets from vault
      - name: Import Secrets
        id: secrets  # important to refer to it in later steps
        uses: hashicorp/vault-action@8b7eaceb79bd7be97b311993e7c1cc5d051213c7
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          exportEnv: false # we rely on step outputs, no need for environment variables
          secrets: |
            secret/data/github.com/organizations/camunda NEXUS_USR;
            secret/data/github.com/organizations/camunda NEXUS_PSW;
            secret/data/products/tasklist/ci/tasklist REGISTRY_HUB_DOCKER_COM_USR;
            secret/data/products/tasklist/ci/tasklist REGISTRY_HUB_DOCKER_COM_PSW;

      #########################################################################
      # Setup and configure Maven, Docker, and settings
      - uses: ./.github/actions/build-tasklist-setup
        name: Build setup
        with:
          nexusUsername: ${{ steps.secrets.outputs.NEXUS_USR }}
          nexusPassword: ${{ steps.secrets.outputs.NEXUS_PSW }}

      #########################################################################
      # Build frontend
      - name: Build frontend
        uses: ./.github/actions/build-tasklist-fe
      #########################################################################
      # Build backend
      - name: Build backend
        run: |
          mvn -T1C clean deploy -B -P -docker,skipFrontendBuild -DskipTests -DskipChecks -DaltStagingDirectory=${{ github.workspace }}/staging-${{ env.BRANCH_NAME }} -DskipRemoteStaging=true -Dmaven.deploy.skip=true

      #########################################################################
      # Docker login and image tagging
      - name: Login to Harbor docker registry
        uses: docker/login-action@v3
        with:
          registry: registry.camunda.cloud
          username: ${{ steps.secrets.outputs.NEXUS_USR }}
          password: ${{ steps.secrets.outputs.NEXUS_PSW }}

      #########################################################################
      # Build Docker image
      - name: Build Docker image
        uses: ./.github/actions/build-platform-docker
        with:
          repository: ${{ inputs.previewEnv && 'registry.camunda.cloud/team-camunda/tasklist' || 'registry.camunda.cloud/team-hto/tasklist' }}
          version: |
            ${{ env.IMAGE_TAG }}
            ${{ env.CI_IMAGE_TAG }}
            ${{ env.PR_IMAGE_TAG }}
          push: ${{ inputs.pushDocker }}
          platforms: ${{ inputs.pushDocker && env.DOCKER_PLATFORMS || 'linux/amd64' }}
          dockerfile: tasklist.Dockerfile

      #########################################################################
      # Docker login for snapshot deployment
      - name: Login to docker hub
        if: ${{ env.IS_DEFAULT_BRANCH == 'true' }}
        uses: docker/login-action@v3
        with:
          username: ${{ steps.secrets.outputs.REGISTRY_HUB_DOCKER_COM_USR }}
          password: ${{ steps.secrets.outputs.REGISTRY_HUB_DOCKER_COM_PSW }}

      #########################################################################
      # Build SNAPSHOT Docker image
      - name: Build SNAPSHOT Docker image
        if: ${{ env.IS_DEFAULT_BRANCH == 'true' }}
        uses: ./.github/actions/build-platform-docker
        with:
          repository: camunda/tasklist
          version: SNAPSHOT
          push: true
          platforms: ${{ env.DOCKER_PLATFORMS }}
          dockerfile: tasklist.Dockerfile

      #########################################################################
      # Deploy Nexus SNAPSHOT
      - name: Deploy - Nexus SNAPSHOT
        if: ${{ env.IS_DEFAULT_BRANCH == 'true' }}
        run: |
          mvn -f tasklist org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged -DskipTests=true -P -docker,skipFrontendBuild -B -DaltStagingDirectory=${{ github.workspace }}/staging-${{ env.BRANCH_NAME }} -DskipRemoteStaging=true -Dmaven.deploy.skip=true

      #########################################################################
      # Collect information about build status for central statistics with CI Analytics
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
